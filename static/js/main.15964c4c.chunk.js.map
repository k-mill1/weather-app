{"version":3,"sources":["scard.js","scardFirst.js","ApiClient.js","App.js","reportWebVitals.js","index.js"],"names":["Scard","props","day","Date","parseInt","dateString","nameDay","getDay","month","getMonth","date","getDate","image","img","maxTemp","Math","round","max","minTemp","min","windSpeed","wind","Card","Body","className","Row","Col","xs","Image","src","alt","text","ScardFirst","humidity","pressure","ApiClient","responseObject","status","Promise","resolve","reject","Error","statusText","url","axios","get","then","this","responseStatusCheck","catch","error","console","log","alert","getRequest","App","useState","weather","cWeather","apiClient","fetchWeather","getWeather","res","response","data","daily","slice","useEffect","style","maxWidth","Header","map","current","i","CardGroup","dt","icon","description","temp","wind_speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15964c4c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport './App.css';\r\n\r\nfunction Scard(props) {\r\n  const days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\r\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n  const day = new Date(parseInt(props.dateString) * 1000);\r\n  const nameDay = days[day.getDay()]\r\n  const month = months[day.getMonth()]\r\n  const date = day.getDate()\r\n  const image = `http://openweathermap.org/img/wn/${props.img}@2x.png`\r\n  const maxTemp = Math.round(props.max)\r\n  const minTemp = Math.round(props.min)\r\n  const windSpeed = Math.round(props.wind)\r\n\r\n  return (\r\n    <>\r\n        <Card>\r\n          <Card.Body className = \"scard\">\r\n            <Row>\r\n              <Col className = \"date-container\" xs = {2}>\r\n                <div>\r\n                  <Row className=\"justify-content-center day\" >{nameDay}</Row>\r\n                  <Row className=\"justify-content-center date\" >{date}{\" \"}{month}</Row>\r\n                </div>\r\n              </Col>\r\n              <Col className = \"weather-image\" xs = {3}>\r\n                <Image src={image} alt={props.alt} />\r\n              </Col>  \r\n              <Col className = \"temp-container\">\r\n                <div>\r\n                  <Row className = \"temp\">{maxTemp}{\"/\"}{minTemp}{\"°C\"}</Row>\r\n                  <Row>{\"Forecast: \"}{props.text}</Row>\r\n                  <Row>{\"Wind: \"}{windSpeed}{\" km/h\"}</Row>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card> \r\n    </>\r\n  );\r\n}\r\n\r\nexport default Scard;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport './App.css';\r\n\r\nfunction ScardFirst(props) {\r\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n  const day = new Date(parseInt(props.dateString) * 1000);\r\n  const nameDay = days[day.getDay()]\r\n  const month = months[day.getMonth()]\r\n  const date = day.getDate()\r\n  const image = `http://openweathermap.org/img/wn/${props.img}@2x.png`\r\n  const maxTemp = Math.round(props.max)\r\n  const minTemp = Math.round(props.min)\r\n  const windSpeed = Math.round(props.wind)\r\n\r\n  return (\r\n    <>\r\n     \r\n        <Card>\r\n          <Card.Body className = \"scardFirst\">\r\n            <Row>\r\n                <Col className = \"city-container \">\r\n                    <div>\r\n                        <Row className = \"justify-content-center city\">{\"Sheffield, UK\"}</Row>\r\n                        <Row className=\"justify-content-center\">{nameDay}{\" \"}{date}{\" \"}{month}</Row>\r\n                        <Row className=\"justify-content-center\"><Image className = \"icon-size\" src={image} alt={props.alt} /></Row>\r\n                        <Row className=\"justify-content-center icon-text\">{props.text}</Row>\r\n                    </div>\r\n                </Col>\r\n                <Col>\r\n                    <div>\r\n                        <Row className = \"large-temp\">{maxTemp}{\"/\"}{minTemp}{\"°C\"}</Row>\r\n                        <Row>\r\n                            <Col xs = {5}>\r\n                                <Row>{\"Wind \"}</Row>\r\n                                <Row>{\"Humidity \"}</Row>\r\n                                <Row>{\"Pressure \"}</Row>\r\n                            </Col>\r\n                            <Col>\r\n                                <Row>{windSpeed}{\" km/h\"}</Row>\r\n                                <Row>{props.humidity}{\" %\"}</Row>\r\n                                <Row>{props.pressure}{\" hPa\"}</Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ScardFirst;","import axios from 'axios'\r\n\r\nexport class ApiClient {\r\n    responseStatusCheck(responseObject) {\r\n        if (responseObject.status >= 200 && responseObject.status < 300) {\r\n            return Promise.resolve(responseObject)\r\n        } else {\r\n            return Promise.reject(new Error(responseObject.statusText))\r\n        }\r\n    }\r\n\r\n    getRequest(url) {\r\n        return axios\r\n        .get(url)\r\n        .then(this.responseStatusCheck)\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(error)\r\n        })\r\n    }\r\n    getWeather() {\r\n        return this.getRequest('https://api.openweathermap.org/data/2.5/onecall?lat=53.3811&lon=-1.4701&exclude=hourly,minutely&units=metric&appid=818a298eaf2bb5d74eded9b609f03250')\r\n    }\r\n\r\n    \r\n}","import React, { useEffect, useState } from 'react';\nimport Scard from './scard';\nimport ScardFirst from './scardFirst';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport { ApiClient } from './ApiClient'\n\nfunction App() {\n  const [weather, cWeather] = useState({\n    weather: []\n  })\n\n  const apiClient = new ApiClient();\n\n  const updateWeather = (response) => {\n    cWeather({\n      weather: response\n    })\n  }\n\n  const fetchWeather = () => {\n    apiClient\n      .getWeather()\n      .then((res) => {\n        updateWeather(res.data.daily)\n        console.log(weather.weather.slice(0, 5))\n      })\n  }\n\n  const buildFirstCard = () => {\n    return weather.weather.slice(0, 1).map((current, i) => (\n      <Row key={i}>\n        <CardGroup>\n          <ScardFirst dateString={current.dt} img={current.weather[0].icon} alt={current.weather[0].description} text={current.weather[0].description} \n          max={current.temp.max} min={current.temp.min} wind={current.wind_speed} pressure={current.pressure} humidity={current.humidity}/>\n        </CardGroup>\n      </Row>\n    ))\n  }\n\n  const buildCards = () => {\n    return weather.weather.slice(1, 7).map((current, i) => (\n      <Row key={i}>\n        <CardGroup>\n          <Scard dateString={current.dt} img={current.weather[0].icon} alt={current.weather[0].description} text={current.weather[0].description} \n          max={current.temp.max} min={current.temp.min} wind={current.wind_speed} />\n        </CardGroup>\n      </Row>\n    ))\n  }\n  \n  useEffect(() => {\n    fetchWeather()\n  }, [])\n  \n  return (\n    <>\n    <Row className=\"justify-content-center\">\n      <Card style={{maxWidth: '30rem'}}>\n      <Card.Header>7-day weather forecast</Card.Header>\n        <Card.Body>\n          {buildFirstCard()}\n          {buildCards()}\n        </Card.Body>\n      </Card>\n    </Row>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}