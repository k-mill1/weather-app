{"version":3,"sources":["scard.js","scardFirst.js","hourlyCard.js","ApiClient.js","App.js","reportWebVitals.js","index.js"],"names":["Scard","props","day","Date","parseInt","dateString","nameDay","getDay","month","getMonth","date","getDate","image","img","maxTemp","Math","round","max","minTemp","min","windSpeed","wind","Card","Body","className","Row","Col","xs","Image","src","alt","text","ScardFirst","currentTemp","currentWeather","currentTime","hour","getHours","minute","getMinutes","slice","humidity","pressure","buildHourlyWeather","HourlyCard","datestring","icon","getIcon","temp","ApiClient","responseObject","status","Promise","resolve","reject","Error","statusText","url","axios","get","then","this","responseStatusCheck","catch","error","console","log","alert","getRequest","App","useState","cDay","weather","dailyWeather","cDailyWeather","hourlyWeather","cHourlyWeather","apiClient","fetchWeather","getWeather","res","response","obj","currentObj","data","daily","updateHourlyWeather","hourly","current","dt","description","wind_speed","useEffect","style","maxWidth","Header","CardGroup","map","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA+CeA,MAxCf,SAAeC,GACb,IAEMC,EAAM,IAAIC,KAAkC,IAA7BC,SAASH,EAAMI,aAC9BC,EAHO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGnCJ,EAAIK,UACnBC,EAHS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGxEN,EAAIO,YACnBC,EAAOR,EAAIS,UACXC,EAAK,2CAAuCX,EAAMY,IAA7C,WACLC,EAAUC,KAAKC,MAAMf,EAAMgB,KAC3BC,EAAUH,KAAKC,MAAMf,EAAMkB,KAC3BC,EAAYL,KAAKC,MAAMf,EAAMoB,MAEnC,OACE,mCACI,cAACC,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,KAAN,CAAWC,UAAY,QAAvB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKF,UAAY,iBAAiBG,GAAM,EAAxC,SACE,gCACE,cAACF,EAAA,EAAD,CAAKD,UAAU,6BAAf,SAA8ClB,IAC9C,eAACmB,EAAA,EAAD,CAAKD,UAAU,8BAAf,UAA+Cd,EAAM,IAAKF,UAG9D,cAACkB,EAAA,EAAD,CAAKF,UAAY,gBAAgBG,GAAM,EAAvC,SACE,cAACC,EAAA,EAAD,CAAOC,IAAKjB,EAAOkB,IAAK7B,EAAM6B,QAEhC,cAACJ,EAAA,EAAD,CAAKF,UAAY,iBAAjB,SACE,gCACE,eAACC,EAAA,EAAD,CAAKD,UAAY,OAAjB,UAAyBV,EAAS,IAAKI,EAAS,WAChD,eAACO,EAAA,EAAD,WAAM,aAAcxB,EAAM8B,QAC1B,eAACN,EAAA,EAAD,WAAM,SAAUL,EAAW,0BC6B9BY,MA3Df,SAAoB/B,GAChB,IAEMC,EAAM,IAAIC,KAAkC,IAA7BC,SAASH,EAAMI,aAC9BC,EAHO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAG3DJ,EAAIK,UACnBC,EAHS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGzGN,EAAIO,YACnBC,EAAOR,EAAIS,UACXC,EAAK,2CAAuCX,EAAMY,IAA7C,WACLC,EAAUC,KAAKC,MAAMf,EAAMgB,KAC3BC,EAAUH,KAAKC,MAAMf,EAAMkB,KAC3BC,EAAYL,KAAKC,MAAMf,EAAMoB,MAC7BY,EAAclB,KAAKC,MAAMf,EAAMiC,gBAC/BC,EAAc,IAAIhC,KAAmC,IAA9BC,SAASH,EAAMkC,cACtCC,EAAOD,EAAYE,WACnBC,GAAU,IAAIH,EAAYI,cAAcC,OAAO,GAErD,OACA,mCACI,cAAClB,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,CAAWC,UAAY,aAAvB,UACA,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKF,UAAY,kBAAjB,SACI,gCACI,cAACC,EAAA,EAAD,CAAKD,UAAY,8BAAjB,SAAgD,kBAChD,eAACC,EAAA,EAAD,CAAKD,UAAU,yBAAf,UAAyClB,EAAS,IAAKI,EAAM,IAAKF,KAClE,eAACiB,EAAA,EAAD,CAAKD,UAAU,yBAAf,UAAyCY,EAAM,IAAKE,KACpD,cAACb,EAAA,EAAD,CAAKD,UAAU,yBAAf,SAAwC,cAACI,EAAA,EAAD,CAAOJ,UAAY,YAAYK,IAAKjB,EAAOkB,IAAK7B,EAAM6B,QAC9F,cAACL,EAAA,EAAD,CAAKD,UAAU,mCAAf,SAAmDvB,EAAM8B,YAGjE,cAACL,EAAA,EAAD,UACI,gCACI,eAACD,EAAA,EAAD,CAAKD,UAAY,aAAjB,UAA+BS,EAAa,WAC5C,eAACR,EAAA,EAAD,CAAKD,UAAY,UAAjB,UAA4B,MAAOV,EAAS,QAAM,MAAOI,EAAS,UAClE,eAACO,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKC,GAAM,EAAX,UACI,cAACF,EAAA,EAAD,UAAM,UACN,cAACA,EAAA,EAAD,UAAM,cACN,cAACA,EAAA,EAAD,UAAM,iBAEV,eAACC,EAAA,EAAD,WACI,eAACD,EAAA,EAAD,WAAML,EAAW,WACjB,eAACK,EAAA,EAAD,WAAMxB,EAAMwC,SAAU,QACtB,eAAChB,EAAA,EAAD,WAAMxB,EAAMyC,SAAU,wBAMtC,oBAAIlB,UAAY,eACpB,cAACC,EAAA,EAAD,UACKxB,EAAM0C,6BC1BRC,MA1Bf,SAAoB3C,GAChB,IAIiB4C,EAMXT,GANWS,EAMI5C,EAAMI,WALT,CAAC,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,QACnJ,IAAIF,KAA4B,IAAvBC,SAASyC,IACXR,aAIhBS,EAXU,SAACA,GACb,MAAM,oCAAN,OAA2CA,EAA3C,WAUSC,CAAQ9C,EAAM6C,MAG7B,OACE,mCACA,eAACpB,EAAA,EAAD,WACI,eAACD,EAAA,EAAD,CAAKD,UAAY,cAAjB,UAAgCT,KAAKC,MAAMf,EAAM+C,MAAO,UACxD,cAACvB,EAAA,EAAD,UAAK,cAACG,EAAA,EAAD,CAAOC,IAAKiB,EAAMhB,IAAK7B,EAAM6B,QAClC,cAACL,EAAA,EAAD,CAAKD,UAAY,cAAjB,SAAgCY,U,iDCxB3Ba,EAAb,mGACI,SAAoBC,GAChB,OAAIA,EAAeC,QAAU,KAAOD,EAAeC,OAAS,IACjDC,QAAQC,QAAQH,GAEhBE,QAAQE,OAAO,IAAIC,MAAML,EAAeM,eAL3D,wBASI,SAAWC,GACP,OAAOC,IACNC,IAAIF,GACJG,KAAKC,KAAKC,qBACVC,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZG,MAAMH,QAflB,wBAkBI,WACI,OAAOH,KAAKO,WAAW,oJAnB/B,KCsHeC,MA7Gf,WACE,MAAoBC,mBAAS,IAA7B,mBAAOpE,EAAP,KAAYqE,EAAZ,KACA,EAAsCD,mBAAS,CAC7CE,QAAS,KADX,mBAAOC,EAAP,KAAqBC,EAArB,KAGA,EAAwCJ,mBAAS,CAC/CE,QAAS,KADX,mBAAOG,EAAP,KAAsBC,EAAtB,KAIMC,EAAY,IAAI5B,EA0BhB6B,EAAe,WACnBD,EACGE,aACAnB,MAAK,SAACoB,GA3BgB,IAACC,EAQAC,EAAKC,EARLF,EA4BHD,EAAII,KAAKC,MA3BhCX,EAAc,CAACF,QAAUS,IAGC,SAACA,GAC3BL,EAAe,CAACJ,QAAUS,IAwBtBK,CAAoBN,EAAII,KAAKG,OAAO/C,MAAM,EAAE,IArBtB0C,EAsBHF,EAAII,KAAKC,MAAM,GAtBPF,EAsBWH,EAAII,KAAKI,QArBnDjB,EAAK,CACHlE,WAAY6E,EAAIO,GAChB5E,IAAKqE,EAAIV,QAAQ,GAAG1B,KACpBhB,IAAIoD,EAAIV,QAAQ,GAAGkB,YACnB3D,KAAMmD,EAAIV,QAAQ,GAAGkB,YACrBzE,IAAKiE,EAAIlC,KAAK/B,IACdE,IAAK+D,EAAIlC,KAAK7B,IACdwE,WAAYT,EAAIS,WAChBjD,SAAUwC,EAAIxC,SACdD,SAAUyC,EAAIzC,SACdP,eAAgBiD,EAAWnC,KAC3Bb,YAAagD,EAAWM,SA8C5B,OAJAG,qBAAU,WACRd,MACC,IAGD,mCACA,cAACrD,EAAA,EAAD,CAAKD,UAAU,yBAAf,SACE,eAACF,EAAA,EAAD,CAAMuE,MAAO,CAACC,SAAU,SAAxB,UACA,cAACxE,EAAA,EAAKyE,OAAN,qCACE,eAACzE,EAAA,EAAKC,KAAN,WACA,cAACE,EAAA,EAAD,UACI,cAACuE,EAAA,EAAD,UACE,cAAC,EAAD,CACC3F,WAAYH,EAAIG,WAChBQ,IAAKX,EAAIW,IACTiB,IAAK5B,EAAI4B,IACTC,KAAM7B,EAAI6B,KACVd,IAAKf,EAAIe,IACTE,IAAKjB,EAAIiB,IACTE,KAAMnB,EAAIyF,WACVlD,SAAUvC,EAAIuC,SACdC,SAAUxC,EAAIwC,SACdR,eAAiBhC,EAAIgC,eACrBC,YAAcjC,EAAIiC,YAClBQ,mBAnDJgC,EAAcH,QAAQyB,KAAI,SAACT,EAAQU,GAAT,OAC/B,cAAC,EAAD,CAEA7F,WAAYmF,EAAQC,GACpB3C,KAAM0C,EAAQhB,QAAQ,GAAG1B,KACzBhB,IAAK0D,EAAQhB,QAAQ,GAAGkB,YACxB1C,KAAMwC,EAAQxC,MAJTkD,YASAzB,EAAaD,QAAQhC,MAAM,EAAG,GAAGyD,KAAI,SAACT,EAASU,GAAV,OAC1C,cAACzE,EAAA,EAAD,UACE,cAACuE,EAAA,EAAD,UACE,cAAC,EAAD,CACA3F,WAAYmF,EAAQC,GACpB5E,IAAK2E,EAAQhB,QAAQ,GAAG1B,KACxBhB,IAAK0D,EAAQhB,QAAQ,GAAGkB,YACxB3D,KAAMyD,EAAQhB,QAAQ,GAAGkB,YACzBzE,IAAKuE,EAAQxC,KAAK/B,IAClBE,IAAKqE,EAAQxC,KAAK7B,IAClBE,KAAMmE,EAAQG,gBATRO,iBCzDDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d899abe0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport './App.css';\r\n\r\nfunction Scard(props) {\r\n  const days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\r\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n  const day = new Date(parseInt(props.dateString) * 1000);\r\n  const nameDay = days[day.getDay()]\r\n  const month = months[day.getMonth()]\r\n  const date = day.getDate()\r\n  const image = `http://openweathermap.org/img/wn/${props.img}@2x.png`\r\n  const maxTemp = Math.round(props.max)\r\n  const minTemp = Math.round(props.min)\r\n  const windSpeed = Math.round(props.wind)\r\n\r\n  return (\r\n    <>\r\n        <Card>\r\n          <Card.Body className = \"scard\">\r\n            <Row>\r\n              <Col className = \"date-container\" xs = {2}>\r\n                <div>\r\n                  <Row className=\"justify-content-center day\" >{nameDay}</Row>\r\n                  <Row className=\"justify-content-center date\" >{date}{\" \"}{month}</Row>\r\n                </div>\r\n              </Col>\r\n              <Col className = \"weather-image\" xs = {3}>\r\n                <Image src={image} alt={props.alt} />\r\n              </Col>  \r\n              <Col className = \"temp-container\">\r\n                <div>\r\n                  <Row className = \"temp\">{maxTemp}{\"/\"}{minTemp}{\"Â°C\"}</Row>\r\n                  <Row>{\"Forecast: \"}{props.text}</Row>\r\n                  <Row>{\"Wind: \"}{windSpeed}{\" km/h\"}</Row>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card> \r\n    </>\r\n  );\r\n}\r\n\r\nexport default Scard;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport './App.css';\r\n\r\nfunction ScardFirst(props) {\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n    const day = new Date(parseInt(props.dateString) * 1000);\r\n    const nameDay = days[day.getDay()]\r\n    const month = months[day.getMonth()]\r\n    const date = day.getDate()\r\n    const image = `http://openweathermap.org/img/wn/${props.img}@2x.png`\r\n    const maxTemp = Math.round(props.max)\r\n    const minTemp = Math.round(props.min)\r\n    const windSpeed = Math.round(props.wind)\r\n    const currentTemp = Math.round(props.currentWeather)\r\n    const currentTime = new Date(parseInt(props.currentTime) * 1000);\r\n    const hour = currentTime.getHours() \r\n    const minute = ('0'+currentTime.getMinutes()).slice(-2) \r\n    \r\n    return (\r\n    <>\r\n        <Card>\r\n            <Card.Body className = \"scardFirst\">\r\n            <Row>\r\n                <Col className = \"city-container \">\r\n                    <div>\r\n                        <Row className = \"justify-content-center city\">{\"Sheffield, UK\"}</Row>\r\n                        <Row className=\"justify-content-center\">{nameDay}{\" \"}{date}{\" \"}{month}</Row>\r\n                        <Row className=\"justify-content-center\">{hour}{\":\"}{minute}</Row>\r\n                        <Row className=\"justify-content-center\"><Image className = \"icon-size\" src={image} alt={props.alt} /></Row>\r\n                        <Row className=\"justify-content-center icon-text\">{props.text}</Row>\r\n                    </div>\r\n                </Col>\r\n                <Col>\r\n                    <div>\r\n                        <Row className = \"large-temp\">{currentTemp}{\"Â°C\"}</Row>\r\n                        <Row className = \"max-min\">{\"H: \"}{maxTemp}{\"Â° \"}{\"L: \"}{minTemp}{\"Â°\"}</Row>\r\n                        <Row>\r\n                            <Col xs = {5}>\r\n                                <Row>{\"Wind \"}</Row>\r\n                                <Row>{\"Humidity \"}</Row>\r\n                                <Row>{\"Pressure \"}</Row>\r\n                            </Col>\r\n                            <Col>\r\n                                <Row>{windSpeed}{\" km/h\"}</Row>\r\n                                <Row>{props.humidity}{\" %\"}</Row>\r\n                                <Row>{props.pressure}{\" hPa\"}</Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n                <hr className = \"white-line\" />\r\n            <Row>\r\n                {props.buildHourlyWeather}\r\n            </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default ScardFirst;","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport './App.css';\r\n\r\nfunction HourlyCard(props) {\r\n    const getIcon = (icon) => {\r\n        return `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n\r\n    const getHour = (datestring) => {\r\n        const hours = [\"12AM\",\"1AM\",\"2AM\",\"3AM\",\"4AM\",\"5AM\",\"6AM\",\"7AM\",\"8AM\",\"9AM\",\"10AM\",\"11AM\",\"12PM\",\"1PM\",\"2PM\",\"3PM\",\"4PM\",\"5PM\",\"6PM\",\"7PM\",\"8PM\",\"9PM\",\"10PM\",\"11PM\"]\r\n        let hour = new Date(parseInt(datestring) * 1000)\r\n        return hours[hour.getHours()]\r\n    }\r\n\r\n    const hour = getHour(props.dateString)\r\n    const icon = getIcon(props.icon)\r\n \r\n  \r\n  return (\r\n    <>\r\n    <Col>\r\n        <Row className = \"hourly-temp\">{Math.round(props.temp)}{\"Â°\"}</Row>\r\n        <Row><Image src={icon} alt={props.alt}/></Row>\r\n        <Row className = \"hourly-time\">{hour}</Row>\r\n    </Col>         \r\n    </>\r\n  );\r\n}\r\n\r\nexport default HourlyCard;","import axios from 'axios'\r\n\r\nexport class ApiClient {\r\n    responseStatusCheck(responseObject) {\r\n        if (responseObject.status >= 200 && responseObject.status < 300) {\r\n            return Promise.resolve(responseObject)\r\n        } else {\r\n            return Promise.reject(new Error(responseObject.statusText))\r\n        }\r\n    }\r\n\r\n    getRequest(url) {\r\n        return axios\r\n        .get(url)\r\n        .then(this.responseStatusCheck)\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(error)\r\n        })\r\n    }\r\n    getWeather() {\r\n        return this.getRequest('https://api.openweathermap.org/data/2.5/onecall?lat=53.3811&lon=-1.4701&exclude=minutely&units=metric&appid=818a298eaf2bb5d74eded9b609f03250')\r\n    }\r\n\r\n    \r\n}","import React, { useEffect, useState } from 'react';\r\nimport Scard from './scard';\r\nimport ScardFirst from './scardFirst';\r\nimport HourlyCard from './hourlyCard';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport CardGroup from 'react-bootstrap/CardGroup';\r\nimport { ApiClient } from './ApiClient'\r\n\r\nfunction App() {\r\n  const [day, cDay] = useState({})\r\n  const [dailyWeather, cDailyWeather] = useState({\r\n    weather: []\r\n  })\r\n  const [hourlyWeather, cHourlyWeather] = useState({\r\n    weather: []\r\n  })\r\n \r\n  const apiClient = new ApiClient();\r\n\r\n  const updateDailyWeather = (response) => {\r\n    cDailyWeather({weather : response})\r\n  }\r\n\r\n  const updateHourlyWeather = (response) => {\r\n    cHourlyWeather({weather : response})\r\n  }\r\n\r\n  const destructureWeather = (obj, currentObj) => {\r\n    cDay({\r\n      dateString: obj.dt,     \r\n      img: obj.weather[0].icon, \r\n      alt:obj.weather[0].description, \r\n      text: obj.weather[0].description, \r\n      max: obj.temp.max, \r\n      min: obj.temp.min,\r\n      wind_speed: obj.wind_speed,\r\n      pressure: obj.pressure,\r\n      humidity: obj.humidity,\r\n      currentWeather: currentObj.temp,\r\n      currentTime: currentObj.dt,\r\n    })\r\n  }\r\n  \r\n  const fetchWeather = () => {\r\n    apiClient\r\n      .getWeather()\r\n      .then((res) => {\r\n        updateDailyWeather(res.data.daily)\r\n        updateHourlyWeather(res.data.hourly.slice(1,7))\r\n        destructureWeather(res.data.daily[0], res.data.current)\r\n      })\r\n  }\r\n\r\n  const buildHourlyWeather = () => {\r\n    return hourlyWeather.weather.map((current,i) => (\r\n      <HourlyCard \r\n      key={i}\r\n      dateString={current.dt} \r\n      icon={current.weather[0].icon} \r\n      alt={current.weather[0].description} \r\n      temp={current.temp} />    \r\n    ))\r\n  }\r\n\r\n  const buildCards = () => {\r\n    return dailyWeather.weather.slice(1, 7).map((current, i) => (\r\n      <Row key={i}>\r\n        <CardGroup>\r\n          <Scard\r\n          dateString={current.dt} \r\n          img={current.weather[0].icon} \r\n          alt={current.weather[0].description} \r\n          text={current.weather[0].description} \r\n          max={current.temp.max} \r\n          min={current.temp.min}\r\n          wind={current.wind_speed}/>\r\n        </CardGroup>\r\n      </Row>\r\n    ))\r\n  }\r\n  \r\n  useEffect(() => {\r\n    fetchWeather()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n    <Row className=\"justify-content-center\">\r\n      <Card style={{maxWidth: '30rem'}}>\r\n      <Card.Header>7-day weather forecast</Card.Header>\r\n        <Card.Body>\r\n        <Row>\r\n            <CardGroup>\r\n              <ScardFirst \r\n               dateString={day.dateString} \r\n               img={day.img} \r\n               alt={day.alt} \r\n               text={day.text} \r\n               max={day.max} \r\n               min={day.min}\r\n               wind={day.wind_speed}\r\n               humidity={day.humidity}\r\n               pressure={day.pressure}\r\n               currentWeather ={day.currentWeather}\r\n               currentTime ={day.currentTime}\r\n               buildHourlyWeather = {buildHourlyWeather()}\r\n               />\r\n            </CardGroup>\r\n          </Row>\r\n          {buildCards()}\r\n        </Card.Body>\r\n      </Card>\r\n    </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}